strict namespace zandui {

enum FLAG_ELEMENT
{   
    // Horizontal
    ELEMENT_ALIGN_LEFT = 1,
    ELEMENT_ALIGN_CENTER = 2,
    ELEMENT_ALIGN_RIGHT = 4,
    // Vertical
    ELEMENT_ALIGN_TOP = 8,
    ELEMENT_ALIGN_MIDDLE = 16,
    ELEMENT_ALIGN_BOTTOM = 32,

    ELEMENT_FLAG_DEFAULT = ELEMENT_ALIGN_LEFT|ELEMENT_ALIGN_TOP
};

struct Element_T
{
    str name;

    int x;
    int y;

    // these are used for hitbox.
    int min_x;
    int max_x;
    int min_y;
    int max_y;

    str image;
    str image_hover;
    str image_clicked;

    int width;
    int height;

    // 0.0 ~ 1.0    
    fixed alpha;

    int flags;

    str command; // Command to send when clicked
};

//@public
//@summary Checks if a coordinate is hovering this elementz
bool coordHovered(Element_T& elem, int x, int y)
{
    return false;
}

//@public
bool isHovered(Element_T& elem)
{
    return false;
}

//@public
void checkClick(Element_T& elem)
{
    if(isHovered(elem) && mouseClicked() && elem.command != "")
    {
        _global.command = elem.command;
        LogDebug(elem.name + ".checkClick(): set command to " + elem.command);
    }
    return;
}

// It is required as BCS want them initialized when they are local vars.
private Element_T _empty_element = {"", 0, 0, 0, 0, 0, 0, "", "", "", 0, 0, 0, ""};

//@public
//@summary creates an element \n if 
Element_T& createElement(int x, int y, int width, int height, int flags, str image, str image_hover, str image_clicked, fixed alpha, str command, str name)
{
    Element_T& temp = _empty_element;
    temp.x = x;
    temp.y = y;
    temp.width = width;
    temp.height = height;

    if(flags == 0)
        temp.flags = ELEMENT_FLAG_DEFAULT;
    else
        temp.flags = flags;

    temp.image = image;
    temp.image_hover = image_hover;
    temp.image_clicked = image_clicked;
    temp.alpha = alpha;
    temp.command = command;

    if(name == "")
        return null;
    temp.name = name;

    LogDebug(__FUNCTION__+": Successfully created an element " + name);

    if(temp.flag & ELEMENT_ALIGN_LEFT)
    {
        temp.min_x = temp.x;
        temp.max_x = temp.width;
    }
    if(temp.flag & ELEMENT_ALIGN_CENTER)
    { 
        temp.min_x = temp.x - temp.width / 2;
        temp.max_x = temp.x + temp.width / 2;
    }
    if(temp.flag & ELEMENT_ALIGN_RIGHT)
    {
        temp.min_x = temp.x - temp.width;
        temp.max_x = temp.x;
    }

    if(temp.flag & ELEMENT_ALIGN_TOP)
    {
        temp.min_y = temp.y + temp.height;
        temp.max_y = temp.y;
    }
    if(temp.flag & ELEMENT_ALIGN_MIDDLE)
    {
        temp.min_y = temp.y + temp.height / 2;
        temp.max_y = temp.y - temp.height / 2;
    }
    if(temp.flag & ELEMENT_ALIGN_BOTTOM)
    {
        temp.min_y = temp.y;
        temp.max_y = temp.y - temp.height;
    }
    return temp;
}

void drawElement(Element_T& elem, int layer)
{
    text = elem.image;
    if(StrSlice(text, 0, 1) == ":") // If the first character is ':'
    {
        text = StrSlice(text, 1, StrLen(text));
    }
    else
    {
        SetFont(text);
        text = "A";
    }

    HudMessage(s:text; HUDMSG_PLAIN, layer, CR_UNTRANSLATED, fixed(elem.min_x), fixed(elem.min_y), 0.0, 1.0);
    checkClick(elem);
}

}